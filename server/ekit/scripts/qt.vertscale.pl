#!/usr/bin/perl
# $Id: qt.vertscale.pl,v 1.7 2011-08-30 02:41:33 triton Exp $
# - - - H O W   T O   U S E - - - - - - - - - - - - - - - 
# This little program draws text and an arrow head using 
# ImageMagick. It's for the new rank question type, which 
# uses JQuery to do drag and drop of 2 lists. 
#
# Usually each question will have an imagei file generated by this 
# script, eg triton/$SID/html/scale.$qlabel.png. The engine expects
# this file to be present. It can be generated with a command, eg:
#
# perl qt.vertscale.pl HRC101_EN -left=Unimportant -right=Important
#
# You can control the font,font size and color, but the defaults (12pt, black)
# should be ok with the standard triton templates, as the png is
# transparent by default.
#
# OTHER LANGUAGES
# ---------------
#
# If you are doing a single language survey, it's not too arduous to have
# To manually type a command to generate images for each of the rank questions
# It gets more fiddly to do it for a number of different languages, especially
# with the foreign character sets. So text2token.pl (which is run as a part of 
# the translation process)
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
use strict;
use Image::Magick;							#perl2exe
use Getopt::Long;							#perl2exe
use HTML::Entities;							#perl2exe
use TPerl::TritonConfig;					#perl2exe
#
# Script to generate images for vertical scale used with +qtype=rank
#
our %opts;
GetOptions (
			help 			=> \$opts{h},
			debug 			=> \$opts{d},
			trace 			=> \$opts{t},
			version 		=> \$opts{v},
			'left=s' 		=> \$opts{left},
			'right=s' 		=> \$opts{right},
			query 			=> \$opts{query},
			show			=> \$opts{show},
			'font=s' 		=> \$opts{font},
			'fill=s' 		=> \$opts{fill},
			'fontsize=i' 	=> \$opts{fontsize},
			'size=s' 		=> \$opts{size},
			'color=s' 		=> \$opts{color},
			'bgcolor=s' 	=> \$opts{bgcolor},
			) or die_usage ( "Bad command line options" );
&die_usage if ($opts{h});
if ($opts{v})
	{
	print "$0: ".'$Header: /au/apps/alltriton/cvs/scripts/qt.vertscale.pl,v 1.7 2011-08-30 02:41:33 triton Exp $'."\n";
	exit 0;
	}
sub die_usage
	{
	my $msg = shift;
	die qq{$msg

Usage:
perl $0 SID [qlabel] [-h] [-v] [-t] [-d] [-left] [-right] [-color] [-bgcolor] [-font=font-name] [-fontsize=n] [-size=heightxwidth] [-query]
Where:
	SID					Survey ID, eg XXX101
	qlabel				Question label (can be used if different scales in same questionnaire)
	-h					Help
	-v					Version
	-t					Trace
	-d					Debug
	-left=Word(s)		Left aligned words to render, best keep it short so it will fit!
	-right=Word(s)		Right aligned words to render, best keep it short so it will fit!
	-color=color		Color of font and lines (defaults to black)
	-bgcolor=color		Background color (defaults to transparent)
	-fill=color			Fill color for arrow head
	-font=font-name		Name of font or font-file
	-fontsize=n			Fontsize (defaults to 12)
	-size=heightxwidth	Size of image in pixels
	-query			 	Query available fonts
	-filename=scale.png	Filename to write to 
	
Note on output file:
The filename defaults to 
	../triton/SID/html/filename
If the filename contains a path, it uses that
If no filename is specified, it uses either
	../triton/SID/html/scale.{qlabel}.left.png
or
	../triton/SID/html/scale.{qlabel}.right.png
};
	}
my $image = Image::Magick->new();	
if ($opts{query})
	{
	my @fonts = $image->QueryFont();
	print join("\n",@fonts)."\n";
	}
my $SID = shift;
$opts{qlabel} = shift;
die_usage("Missing SID") if !($SID);
die_usage("Missing word") if !($opts{left} || $opts{right});


#
# Apply defaults to parameters
#
$opts{font} = ($opts{font}) ? $opts{font} : 'Helvetica';	# Helvetica is likely to be there, 
															# otherwise see scripts/im.font.gen.pl
															# for how to get a list of fonts
															# that ImageMagick can use

$opts{fontsize} = ($opts{fontsize}) ? $opts{fontsize} : '12',
$opts{color} = ($opts{color}) ? $opts{color} : 'black',
$opts{bgcolor} = ($opts{bgcolor}) ? $opts{bgcolor} : 'transparent',
$opts{fill} = ($opts{fill}) ? $opts{fill} : 'yellow';
if ($opts{size} eq '')
	{
	$opts{size} = ($opts{left} && $opts{right}) ? '300x25' : '150x25';
	}
$opts{height} = 120;
$opts{width} = 25;
if ($opts{size} =~ /(\d+)\s*x\s*(\d+)/)
	{
	$opts{height} = $1;
	$opts{width} = $2;
	}
	
print qq{size=$opts{size}\n} if ($opts{d});
# Check font file exists
#die qq{Error: Font file not found: $opts{font}\n} if !-f $opts{font};

my $troot = getConfig('TritonRoot');

if ($opts{filename} !~ /\//)		# Only adjust filename if no path information in it
	{
	my $htmldir = qq{$troot/$SID/html};
	die_usage("Error: html directory $htmldir does not exist\n") if (! -d $htmldir);
	my $direction = ($opts{right}) ? ".right" : ".left";
	$direction = '' if ($opts{left} && $opts{right});
	$opts{filename} = ($opts{filename}) ? qq{$htmldir/$opts{filename}} : qq{$htmldir/scale.$opts{qlabel}$direction.png};
	}
$image -> Set(size=>$opts{size});

my $r = $image->ReadImage("xc:$opts{bgcolor}");
warn $r if $r;

if ($opts{left})
	{
	$r = $image->Draw(primitive=> 'polygon',
		points 		=> '5,12,17,18,17,6',
		antialias	=> 'true',
		stroke		=> $opts{color},
		fill		=> $opts{fill},
		);
	warn $r if $r;
	my $word = $opts{left};
	if (($word =~ /&#/) || ($word =~ /&\w+;/))			# Does it look like it contains a HTML entity?
		{
		$word = decode_entities($word);
		}
	print "lword=$word\n" if ($opts{d});
	$r = $image->Annotate(
		text		=> $word,
		x			=> 25,
		y			=> 0,
		stroke		=> 'none',
		font		=> $opts{font},
		pointsize	=> $opts{fontsize},
		fill		=> $opts{color},
		antialias	=> 'true',
		gravity		=> 'west',
	#	rotate		=> 90,
		encoding	=> 'utf-8',
			);
	warn $r if $r;
	}

if ($opts{right})
	{
	my @x = ($opts{height}-5,$opts{height}-17,$opts{height}-17);
	print "x=".join(",",@x)."\n" if ($opts{d});
	$r = $image->Draw(primitive=> 'polygon',
		points 		=> "$x[0],12,$x[1],18,$x[2],6",
		stroke		=> $opts{color},
		fill		=> $opts{fill},
		);
	warn $r if $r;
	my $word = $opts{right};
	if (($word =~ /&#/) || ($word =~ /&\w+;/))			# Does it look like it contains a HTML entity?
		{
		$word = decode_entities($word);
		}
	print "rword=$word\n" if ($opts{d});
	$r = $image->Annotate(
		text		=> $word,
		x			=> 25,
		y			=> 0,
		stroke		=> 'none',
		font		=> $opts{font},
		pointsize	=> $opts{fontsize},
		fill		=> $opts{color},
		antialias	=> 'true',
		gravity		=> 'east',
	#	rotate		=> 90,
		encoding	=> 'utf-8',
			);
	warn $r if $r;
	}


$r = $image->Rotate(270);
$r = $image->Write(filename=>$opts{filename}, compression=>'None');
warn $r if $r;
undef $image;
print "[I] Saved file: $opts{filename}\n";
system("gnome-open $opts{filename}") if ($opts{show});
1;
